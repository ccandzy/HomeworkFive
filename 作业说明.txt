
1.创建3个菜，分别为辣椒炒肉，口味蛇，毛血旺 分别展示，并打印推荐指数

2.简单工厂点菜 通过ID读取配置文件（这里是在APP.CONFIG中appsettings增加Key）后再反射创建菜品对象。
  在菜品创建后，会创建一个DishContext的上下文，用来记录 桌号，份数，口味等属性
  调用点菜方法（PointDish）时，会传入该菜品对应的DishContext

3.工厂方法点菜 通过ID读取配置文件（这里是在APP.CONFIG中appsettings增加Key）后再反射创建工厂。
  创建工厂后再创建对应的菜品
  菜品创建后，会创建一个DishContext的上下文，用来记录 桌号，份数，口味等属性
  调用点菜方法（PointDish）时，会传入该菜品对应的DishContext

4.抽象工厂点菜 通过一个工厂创建多个菜 默认三个菜、一个汤、一个主食
  固定创建，无DishContext，PointDish

  通过工厂配置文件+工厂，修改配置文件便可增加新菜 新菜品HomeworkFiveGuangDongModel通过扩展DLL
  实现菜品的灵活增加 

5.首先通过代码创建几个固定的菜项，再通过读取Dish.json文件，读取可配置的其他可选菜。
  菜单通过静态方法    SingletonDishMenu
          静态构造函数SingletonForStaticConstructor
	  静态字段    SingletonForStaticField
  实现单例模式

客人点菜：
  Consumer客人类 
  ConsumerContext客人上下文，用于存储当前客人所点菜，桌号，及口味
  
  输入ID 验证输入是否正确 正确 回车开始点菜，点完之后输入OK确认菜单

  确认之后会弹出所有所点的菜  


5  做个点菜系统，用户输入可选菜id进行点菜：

    a)用单例模式生成菜单；

    b)菜单的可选菜用配置文件配置(单例菜单初始化的时候读取)；

    c)有一个抽象的父类AbstractFood,包含品尝普通方法、点评虚方法(随机评分)、做菜抽象方法,以及名称、价格、简介等基本属性(值最好也能放入到配置文件)；
    
    d)然后每个菜是一个独立的类，扩展新菜时可以增加dll，然后修改配置文件即可;

    e)用户输入id点菜，通过反射 + 简单工厂+ 配置文件去生成菜的对象；

    f)多线程演示：甲乙丙三个客人(三个线程)分别随机点5个菜，然后每个菜依次做菜、品尝、点评，

                  要求每个客人的五个菜吃完后，评选出该客人点的得分最高的菜，展示出来

                      三个客人都吃完后，评选出得分最高的菜，展示出来

扩展要求
6  试着在5的基础上，为菜建立一个装饰器模式，装饰做菜方法：
                    做菜前增加买菜、洗菜、切菜；
	            做菜后增加摆盘、上菜；


 



要求:
   1 点菜、做菜、品尝、点评等都需要输出控制台信息和文本日志
   2 作业中能展示下大家各地的特色菜
   3 思考的内容要求用文字表达出来
   4 继续学习全套的设计模式视频(链接: http://pan.baidu.com/s/1mhIXYha 密码: 5ftn)