
1.创建3个菜，分别为辣椒炒肉，口味蛇，毛血旺 分别展示，并打印推荐指数

2.简单工厂点菜 通过ID读取配置文件（这里是在APP.CONFIG中appsettings增加Key）后再反射创建菜品对象。
  在菜品创建后，会创建一个DishContext的上下文，用来记录 桌号，份数，口味等属性
  调用点菜方法（PointDish）时，会传入该菜品对应的DishContext

3.工厂方法点菜 通过ID读取配置文件（这里是在APP.CONFIG中appsettings增加Key）后再反射创建工厂。
  创建工厂后再创建对应的菜品
  菜品创建后，会创建一个DishContext的上下文，用来记录 桌号，份数，口味等属性
  调用点菜方法（PointDish）时，会传入该菜品对应的DishContext

4.抽象工厂点菜 通过一个工厂创建多个菜 默认三个菜、一个汤、一个主食
  固定创建，无DishContext，PointDish

  通过工厂配置文件+工厂，修改配置文件便可增加新菜 新菜品HomeworkFiveGuangDongModel通过扩展DLL
  实现菜品的灵活增加 

5.首先通过代码创建几个固定的菜项，再通过读取Dish.json文件，读取可配置的其他可选菜。
  菜单通过静态方法    SingletonDishMenu
          静态构造函数SingletonForStaticConstructor
	  静态字段    SingletonForStaticField
  实现单例模式

  客人点菜：
  Consumer客人类 
  ConsumerContext客人上下文，用于存储当前客人所点菜，桌号，及口味
  
  输入ID 验证输入是否正确 正确 回车开始点菜，点完之后输入OK确认菜单

  确认之后会弹出所有所点的菜   

 5.f多线程演示：甲乙丙三个客人(三个线程)分别随机点5个菜，然后每个菜依次做菜、品尝、点评，
   客人随机点菜之后依次 买菜（AbstractBuyFoodDecorator）
	 	       洗菜（AbstractWashFoodDecorator）
		       切菜（AbstractCutFoodDecorator） 
		       做菜 DoDish
                       摆盘（AbstractPendFoodDecorator）
		       上菜（AbstractServingFoodDecorator）
		       品尝 Taste
		       打分 Review
 加入客人对应的上下文ConsumerContext
 每个客人点完菜品尝打分之后
 加入List<ConsumerContext> 
 等待3个线程都完成之后，从List<ConsumerContext>取出所有菜，按分数算出最高分



 



